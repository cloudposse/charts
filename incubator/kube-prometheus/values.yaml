global:
  ## hyperkube image to use when getting & deleting ThirdPartyResources
  ## created by prometheus-operator. Also used when alertmanager.cleanup or
  ## prometheus.cleanup is true.
  ##
  hyperkube:
    repository: quay.io/coreos/hyperkube
    tag: v1.5.2_coreos.1
    pullPolicy: IfNotPresent

alertmanager:
  ## if true, delete Alertmanager StatefulSet & Service when release is deleted
  ##
  cleanup: true

  ## number of replicas to create in Alertmanager StatefulSet
  ##
  replicaCount: 3

  ## version of Alertmanager to install
  ##
  version: v0.5.1
## IMPORTANT ( prometheus.alertmanager )
  # ingress:
    ## name to use when creating Alertmanager Ingress
    ## Ex: 'main' will create Ingress named '<release>-kube-prometheus-alertmanager-main'
    ##
    # - name: main

      # labels:
      #   dns: route53

      ## annotations for Alertmanager Ingress
      ##
      # annotations:
      #   kubernetes.io/ingress.class: nginx
      #   kubernetes.io/tls-acme: 'true'

      ## fully-qualified domain names of Alertmanager Ingress to create
      ##
      # hosts:
      #   - alertmanager.example.com

      ## TLS configuration for Alertmanager Ingress
      ## secret must be manually created in the namespace
      ##
      # tls:
      #   - secretName: alertmanager-main-tls
      #     hosts:
      #       - alertmanager.example.com

  service:
    ## annotations for Alertmanager Service
    ##
    # annotations:

    ## Alertmanager Service port to expose on each node
    ## only used if alertmanager.service.type is 'NodePort'
    ##
    nodePort: 30903

    ## Alertmanager Service type
    ##
    type: NodePort

  ## Alertmanager StorageSpec for persistent data
  ## Ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/prometheus.md#storagespec
  ##
  # storageSpec:
  #   class: default
  #   selector: ""
  #   resources:
  #     requests:
  #       storage: 4Gi

grafana:
  plugins:
  ## To override default grafana configs use envvars http://docs.grafana.org/installation/configuration/#using-environment-variables
  ## GF_<SectionName>_<KeyName>
  config:
    security:
      adminUser: admin
## IMPORTANT ( grafana.config.security.adminPassword )
      adminPassword: admin
    auth:
      basicEnabled: true
      anonymousEnabled: true
      github:
        enabled: false
## IMPORTANT ( grafana.config.auth.github.id )
        id:
## IMPORTANT ( grafana.config.auth.github.secret )
        secret:
## IMPORTANT ( grafana.config.auth.github.allowedOrganizations )
        allowedOrganizations:
## IMPORTANT ( grafana.config.auth.github.teamIds )
        teamIds:
        allowSignup: false
        scopes: user:email read:org
        authUrl: https://github.com/login/oauth/authorize
        tokenUrl: https://github.com/login/oauth/access_token
        apiUrl: https://api.github.com/user
      google:
        id:
        secret:
      generic:
        id:
        secret:
    server:
      rootUrl:
      domain:
  env:

  ## Grafana image
  ##
  image:
    repository: grafana/grafana
    tag: 4.1.1
    pullPolicy: IfNotPresent
## IMPORTANT ( grafana.ingress )
  # ingress:
    ## name to use when creating Grafana Ingress
    ## Ex: 'grafana' will create Ingress named '<release>-kube-prometheus-grafana'
    ##
    # - name: grafana

      # labels:
      #   dns: route53

      ## annotations for Grafana Ingress
      ##
      # annotations:
      #   kubernetes.io/ingress.class: nginx
      #   kubernetes.io/tls-acme: 'true'

      ## fully-qualified domain names of Grafana Ingress to create
      ##
      # hosts:
      #   - grafana.example.com

      ## TLS configuration for Grafana Ingress
      ## secret must be manually created in the namespace
      ##
      # tls:
      #   - secretName: grafana-tls
      #     hosts:
      #       - grafana.example.com

  ## Grafana resource limits & requests
  ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 100m
      memory: 100Mi

  storage:
    emptyDir: {}

  service:
    ## annotations for Grafana Service
    ##
    # annotations:

    ## Grafana Service port to expose on each node
    ## only used if grafana.service.type is 'NodePort'
    ##
    nodePort: 30902

    ## Grafana Service type
    ##
    type: NodePort

grafanaWatcher:
  ## grafana-watcher enables the loading of Grafana dashboards from a ConfigMap
  ## Ref: https://github.com/coreos/kube-prometheus#dashboarding
  ##
  image:
    repository: quay.io/coreos/grafana-watcher
    tag: latest
    pullPolicy: Always

  ## grafana-watcher resource limits & requests
  ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      cpu: 100m
      memory: 32Mi
    requests:
      cpu: 50m
      memory: 16Mi

kubeStateMetrics:
  ## kube-state-metrics generates & exposes cluster-level Prometheus metrics
  ## Ref: https://github.com/kubernetes/kube-state-metrics
  ##
  image:
    repository: gcr.io/google_containers/kube-state-metrics
    tag: v0.3.0
    pullPolicy: IfNotPresent

  ## kube-state-metrics resource limits & requests
  ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      cpu: 200m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 30Mi

nodeExporter:
  ## Prometheus Node Exporter image
  ##
  image:
    repository: quay.io/prometheus/node-exporter
    tag: v0.13.0
    pullPolicy: IfNotPresent

  ## Prometheus Node Exporter resource limits & requests
  ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      cpu: 200m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 30Mi

  service:
    ## Prometheus Node Exporter Service port to expose on each node
    ##
    nodePort: 9100

prometheus:
  ## if true, delete Prometheus StatefulSet & Service when release is deleted
  ##
  cleanup: true

  ## how long to retain metrics
  ##
  retention: 24h

  ## version of Prometheus to install
  ##
  version: v1.5.0

  ## Prometheus resource limits & requests
  ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 400Mi
## IMPORTANT ( prometheus.ingress )
  # ingress:
    ## name to use when creating Prometheus Ingress
    ## Ex: 'k8s' will create Ingress named '<release>-kube-prometheus-prometheus-k8s'
    ##
    # - name: k8s

      # labels:
      #   dns: route53

      ## annotations for Prometheus Ingress
      ##
      # annotations:
      #   kubernetes.io/ingress.class: nginx
      #   kubernetes.io/tls-acme: 'true'

      ## fully-qualified domain names of Prometheus Ingress to create
      ##
      # hosts:
      #   - prometheus.example.com

      ## TLS configuration for Prometheus Ingress
      ## secret must be manually created in the namespace
      ##
      # tls:
      #   - secretName: prometheus-k8s-tls
      #     hosts:
      #       - prometheus.example.com

  service:
    ## annotations for Prometheus Service
    ##
    # annotations:

    ## Prometheus Service port to expose on each node
    ## only used if prometheus.service.type is 'NodePort'
    ##
    nodePort: 30900

    ## Prometheus Service type
    ##
    type: NodePort

  ## Prometheus StorageSpec for persistent data
  ## Ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/prometheus.md#storagespec
  ##
  # storageSpec:
  #   class: default
  #   selector: ""
  #   resources:
  #     requests:
  #       storage: 16Gi

prometheus-operator:
  ## prometheus-operator image
  ##
  image:
    repository: quay.io/coreos/prometheus-operator
    tag: v0.2.3
    pullPolicy: IfNotPresent

  ## collect & send anonymous usage statistics
  ## Ref: https://github.com/coreos/prometheus-operator#installation
  ##
  sendAnalytics: true

  ## prometheus-operator resource limits & requests
  ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      cpu: 200m
      memory: 300Mi
    requests:
      cpu: 100m
      memory: 50Mi
