apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: grafana
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: "{{ template "fullname" . }}-grafana"
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Chart.Name "/templates/grafana-configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Chart.Name "/templates/grafana-secret.yaml") . | sha256sum }}
      labels:
        app: {{ template "name" . }}
        component: grafana
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: grafana
          image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
          imagePullPolicy: "{{ .Values.grafana.image.pullPolicy }}"
          env:
            - name: GF_INSTALL_PLUGINS
              value: {{ .Values.grafana.plugins | quote }}
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: password
{{if .Values.grafana.config.auth.github.id }}
            - name: GF_AUTH_GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: github_client_id
{{end}}
{{if .Values.grafana.config.auth.github.secret }}
            - name: GF_AUTH_GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: github_client_secret
{{end}}
{{if .Values.grafana.config.auth.google.id }}
            - name: GF_AUTH_GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: google_client_id
{{end}}
{{if .Values.grafana.config.auth.google.secret }}
            - name: GF_AUTH_GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: google_client_secret
{{end}}
{{if .Values.grafana.config.auth.generic.id }}
            - name: GF_AUTH_GENERIC_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: generic_client_id
{{end}}
{{if .Values.grafana.config.auth.generic.secret }}
            - name: GF_AUTH_GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: generic_client_secret
{{end}}
{{- range $name, $value := .Values.grafana.env }}
{{- if not (empty $value) }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
{{- end }}
{{- end }}
          ports:
            - name: http
              containerPort: 3000
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/grafana-storage
            - name: grafana-configs
              mountPath: /etc/grafana
          resources:
{{ toYaml .Values.grafana.resources | indent 12 }}
        - name: grafana-watcher
          image: "{{ .Values.grafanaWatcher.image.repository }}:{{ .Values.grafanaWatcher.image.tag }}"
          imagePullPolicy: "{{ .Values.grafanaWatcher.image.pullPolicy }}"
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "fullname" . }}-grafana"
                  key: password
          args:
            - --watch-dir=/var/grafana-dashboards
            - --grafana-url=http://$(GF_SECURITY_ADMIN_USER):$(GF_SECURITY_ADMIN_PASSWORD)@localhost:3000
          volumeMounts:
            - name: grafana-dashboards
              mountPath: /var/grafana-dashboards
          resources:
{{ toYaml .Values.grafanaWatcher.resources | indent 12 }}
          volumeMounts:
            - name: grafana-dashboards
              mountPath: /var/grafana-dashboards
      volumes:
        - name: grafana-storage
{{ toYaml .Values.grafana.storage | indent 10 }}
        - name: grafana-dashboards
          configMap:
            name: "{{ template "fullname" . }}-grafana"
        - name: grafana-configs
          configMap:
            name: "{{ template "fullname" . }}-grafana-config"
