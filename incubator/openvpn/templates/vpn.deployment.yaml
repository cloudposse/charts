apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
spec:
  replicas: {{ .Values.openvpn.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
      annotations:
        pod.alpha.kubernetes.io/init-containers: '[
              {
                  "name": "create-pki",
                  "image": "{{ .Values.openvpn.image.repository }}:{{ .Values.openvpn.image.tag }}",
                  "imagePullPolicy": "{{ .Values.openvpn.image.pullPolicy }}",
                  "command": ["sh", "-c"],
                  "args":[
                    "ovpn_genconfig -u tcp://$EASYRSA_REQ_CN:{{ template "exposed_port" .}} && ovpn_initpki nopass && mkdir /etc/openvpn/clients"
                  ],
                  "env": [
                    { "name": "OVPN_OTP_AUTH", "value": "1" },
                    { "name": "EASYRSA_BATCH", "value": "1" },
                    { "name": "EASYRSA_REQ_CN", "value": {{ .Values.host | quote }} }
                  ],
                  "volumeMounts": [
                      {
                          "name": "ca",
                          "mountPath": "/etc/openvpn"
                      }
                  ]
              }
          ]'
        checksum/config: {{ include (print $.Chart.Name "/templates/dashboard.configmap.yaml") . | sha256sum }}
    spec:
      containers:
      - name: vpn
        image: "{{ .Values.openvpn.image.repository }}:{{ .Values.openvpn.image.tag }}"
        imagePullPolicy: {{ .Values.openvpn.image.pullPolicy }}
        command: ["sh", "-c"]
        args:
         - |-
            ovpn_genconfig -u tcp://$EASYRSA_REQ_CN:{{ template "exposed_port" .}} \
              -n $(cat /etc/resolv.conf | grep -i nameserver|head -n1|cut -d ' ' -f2) \
              -p "dhcp-option DOMAIN-SEARCH cluster.local" \
              -p "dhcp-option DOMAIN-SEARCH svc.cluster.local" \
              -p "dhcp-option DOMAIN-SEARCH {{ .Release.Namespace }}.svc.cluster.local" \
              {{ template "openvpn_share_port" . }} \
            && /init.sh
        env:
          - name: DEBUG
            value: {{ .Values.debug | quote }}
          - name: GITHUB_PAM_TEAM
            value: {{ .Values.github_team | quote}}
          - name: OVPN_OTP_AUTH
            value: '1'
          - name: EASYRSA_REQ_CN
            value: {{ .Values.host | quote}}
        ports:
          - name: tcp
            containerPort: 1194
            protocol: TCP
        securityContext:
          privileged: true
          capabilities:
            add:
              - NET_ADMIN
        volumeMounts:
          - name: ca
            mountPath: /etc/openvpn
        resources:
{{ toYaml .Values.openvpn.resources | indent 12 }}
      - name: dashboard
        image: "{{ .Values.dashboard.image.repository }}:{{ .Values.dashboard.image.tag }}"
        imagePullPolicy: {{ .Values.dashboard.image.pullPolicy }}
        ports:
          - name: http
            containerPort: {{ .Values.dashboard.service.internalPort }}
            protocol: TCP
        volumeMounts:
          - name: config
            mountPath: /etc/nginx/sites-enabled
          - name: source
            mountPath: /usr/share/nginx/html
          - name: ca
            mountPath: /usr/share/nginx/private
            subPath: clients
        livenessProbe:
          tcpSocket:
            port: {{ .Values.dashboard.service.internalPort }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.dashboard.service.internalPort }}
        resources:
{{ toYaml .Values.dashboard.resources | indent 12 }}
      - name: oauth
        image: "{{ .Values.oauth.image.repository }}:{{ .Values.oauth.image.tag }}"
        imagePullPolicy: {{ .Values.oauth.image.pullPolicy }}
        args:
          - "-config"
          - "/usr/share/oauth2_proxy/config"
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: "{{ template "fullname" . }}-oauth"
              key: client_id
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ template "fullname" . }}-oauth"
              key: client_secret
        - name: OAUTH2_PROXY_COOKIE_NAME
          valueFrom:
            secretKeyRef:
              name: "{{ template "fullname" . }}-oauth"
              key: cookie_name
        - name: OAUTH2_PROXY_COOKIE_DOMAIN
          valueFrom:
            secretKeyRef:
              name: "{{ template "fullname" . }}-oauth"
              key: cookie_domain
        - name: OAUTH2_PROXY_COOKIE_EXPIRE
          valueFrom:
            secretKeyRef:
              name: "{{ template "fullname" . }}-oauth"
              key: cookie_expire
        - name: OAUTH2_PROXY_COOKIE_REFRESH
          valueFrom:
            secretKeyRef:
              name: "{{ template "fullname" . }}-oauth"
              key: cookie_refresh
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ template "fullname" . }}-oauth"
              key: cookie_secret
        ports:
        - containerPort: {{ .Values.oauth.service.http.internalPort }}
        - containerPort: {{ .Values.oauth.service.https.internalPort }}
        volumeMounts:
          - name: oauth-config
            mountPath: /usr/share/oauth2_proxy
        livenessProbe:
          tcpSocket:
            port: {{ .Values.oauth.service.http.internalPort }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.oauth.service.http.internalPort }}
        resources:
{{ toYaml .Values.oauth.resources | indent 12 }}
{{ if ( and .Values.ui.enabled .Values.ui.ssl.enabled ) }}
      - name: "proxy"
        image: "{{ .Values.proxy.image.repository }}:{{ .Values.proxy.image.tag }}"
        imagePullPolicy: {{ .Values.proxy.image.pullPolicy }}
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
        volumeMounts:
          - name: config
            mountPath: /etc/nginx/conf.d
        livenessProbe:
          tcpSocket:
            port: 80
        readinessProbe:
          tcpSocket:
            port: 80
        resources:
{{ toYaml .Values.proxy.resources | indent 12 }}
{{ end }}
      volumes:
        - name: ca
          persistentVolumeClaim:
            claimName: {{ template "fullname" . }}
        - name: source
          configMap:
            name: "{{ template "fullname_dashboard" . }}"
        - name: config
          configMap:
            name: "{{ template "fullname_dashboard" . }}-config"
        - name: oauth-config
          configMap:
            name: "{{ template "fullname" . }}-oauth"
{{ if ( and .Values.ui.enabled .Values.ui.ssl.enabled ) }}
        - name: config
          configMap:
            name: {{ template "fullname_proxy" . }}
{{ end }}
