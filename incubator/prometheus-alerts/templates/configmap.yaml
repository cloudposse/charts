apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    release: {{ .Release.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
{{ toYaml .Values.labels | indent 4 }}
  name: {{ template "fullname" . }}
data:
  alerts.rules: |-
    # NOTE: These rules were kindly contributed by the Cloud Posse engineering team.

    cluster:node_cpu_resources =
      sum by (cluster) (machine_cpu_cores)

    cluster:node_cpu_used =
      sum by (cluster) (rate(node_cpu{mode!="idle"}[30s]))

    cluster:node_cpu_idle:percent =
      100 * (cluster:node_cpu_resources - cluster:node_cpu_used) / cluster:node_cpu_resources

    ALERT ClusterCPULow
      IF cluster:node_cpu_idle:percent <= {{ .Values.alerts.cluster_cpu_low.warning }}
      FOR 30s
      LABELS {
        service = "k8s",
        severity = "warning",
      }
      ANNOTATIONS {
        summary = "Cluster CPU high load",
        description = "K8S cluster have high cpu load",
      }

    ALERT ClusterCPULow
      IF cluster:node_cpu_idle:percent <= {{ .Values.alerts.cluster_cpu_low.critical }}
      FOR 30s
      LABELS {
        service = "k8s",
        severity = "critical",
      }
      ANNOTATIONS {
        summary = "Cluster CPU critical load",
        description = "K8S cluster have critical cpu load",
      }

    cluster:memory_free:percent =
      100 - cluster:memory_used:percent

    ALERT ClusterMemoryLow
      IF cluster:memory_free:percent <= {{ .Values.alerts.cluster_memory_low.warning }}
      FOR 30s
      LABELS {
        service = "k8s",
        severity = "warning",
      }
      ANNOTATIONS {
        summary = "Cluster running out of memory",
        description = "Cluster running out of memory",
      }

    ALERT ClusterMemoryLow
      IF cluster:memory_free:percent <= {{ .Values.alerts.cluster_memory_low.critical }}
      FOR 30s
      LABELS {
        service = "k8s",
        severity = "critical",
      }
      ANNOTATIONS {
        summary = "Cluster ran out of memory",
        description = "Cluster ran out of memory",
      }
      
    kube_pod_container_restarts_per_hour =
      delta(kube_pod_container_status_restarts[1h])

    ALERT PodRestartsTooOften
      IF kube_pod_container_restarts_per_hour >= {{ .Values.alerts.pod_restarts.warning }}
      FOR 30s
      LABELS {
        service = "k8s",
        severity = "warning",
      }
      ANNOTATIONS {
        summary = "Pod {{`{{ $labels.pod }}`}} restarts too often",
        description = "Pod {{`{{ $labels.pod }}`}} restarts {{`{{ $value }}`}} during last 1 hour. Should be < {{ .Values.alerts.pod_restarts.warning }}",
      }

    ALERT PodRestartsTooOften
      IF kube_pod_container_restarts_per_hour >= {{ .Values.alerts.pod_restarts.critical }}
      FOR 30s
      LABELS {
        service = "k8s",
        severity = "critical",
      }
      ANNOTATIONS {
        summary = "Pod {{`{{ $labels.pod }}`}} restarts too often",
        description = "Pod {{`{{ $labels.pod }}`}} restarts {{`{{ $value }}`}} during last 1 hour. This is critical level, should be < {{ .Values.alerts.pod_restarts.critical }}",
      }
